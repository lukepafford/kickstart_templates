#version=DEVEL
# System authorization information
auth --enableshadow --passalgo=sha512

# Use HTTP installation
url --url={{ install_url }}

# Reboot after
reboot

# Use graphical install
text

# Run the Setup Agent on first boot
firstboot --enable
ignoredisk --only-use={{ drive_type }}
# Keyboard layouts
keyboard --vckeymap=us --xlayouts='us'
# System language
lang en_US.UTF-8

# Network information
network  --bootproto=dhcp --device=bootif --ipv6=auto --activate
network  --hostname={{ hostname }}.{{ domain }}

# Firewall
firewall --enabled --service=ssh

# Root password
rootpw --iscrypted {{ root_crypted_password }}

# System services
services --disabled="chronyd" --enabled="sshd"

# System timezone
timezone America/Los_Angeles --isUtc --nontp
user --groups=wheel --name={{ admin_user }} --password={{ admin_crypted_password }} --iscrypted --gecos="{{ admin_user }}"

# System bootloader configuration
zerombr 
clearpart --all --drives={{ drive_type }}
####################################
part /boot --fstype ext4 --size=1000
part pv.01 --size=1000 --grow --ondisk={{ drive_type }}
volgroup vg00 pv.01
logvol / 	    	    --name=root  --vgname=vg00 --fstype="ext4" --size=25000
logvol /var/log		    --name=var_log   --vgname=vg00 --fstype="ext4" --size=2000
logvol /var/log/audit 	--name=var_log_audit --vgname=vg00 --fstype="ext4" --size=1000
logvol /home 	    	--name=home  --vgname=vg00 --fstype="ext4" --size=5000
logvol /var 	    	--name=var   --vgname=vg00 --fstype="ext4" --grow  --size=5000
logvol swap 	    	--name=swap  --vgname=vg00 --fstype="swap" --recommended
logvol /tmp 	    	--name=tmp   --vgname=vg00 --fstype="ext4" --size=3000

%packages
@^server-product-environment
jq
%end

%addon com_redhat_kdump --disable --reserve-mb='auto'

%end

%anaconda
pwpolicy root --minlen=6 --minquality=1 --notstrict --nochanges --notempty
pwpolicy user --minlen=6 --minquality=1 --notstrict --nochanges --emptyok
pwpolicy luks --minlen=6 --minquality=1 --notstrict --nochanges --notempty
%end

%post

# Create a DNS record in IDM
username='{{ idm_api_username }}'
password='{{ idm_api_password }}'
cookieJar=/tmp/setup-cookiejar.txt
domain="{{ domain }}"
idmHost="{{ idm_server }}"

# Login with user name and password
curl -v  \
	-H "Referer:https://${idmHost}/ipa"  \
	-H "Content-Type:application/x-www-form-urlencoded" \
	-H "Accept:text/plain" \
	-b "${cookieJar}" -c "${cookieJar}" \
	-k \
	--data "user=${username}&password=${password}" \
	-X POST \
	"https://${idmHost}/ipa/session/login_password"

# Create the dns record
jsonRequest() {
	cat <<EOF
{
	"method": "dnsrecord_add",
	"params": [
		[
			"${domain}"
		],
		{
			"idnsname": "$(hostname -s)",
			"arecord": "$(ip addr show | grep 'state UP' -A2 | grep '^[[:space:]]*inet' | awk '{print $2}' | cut -d '/' -f 1)",
			"a_extra_create_reverse": "true"
		}
	],
	"id": 0	,
	"version": "4.8.0"
}
EOF
}

curl -v  \
    -H "referer:https://${idmHost}/ipa"  \
    -H "Content-Type:application/json" \
    -H "Accept:application/json"\
    -c "${cookieJar}" -b "${cookieJar}" \
		-k \
		-d "$(jsonRequest)" \
    -X POST \
		"https://${idmHost}/ipa/session/json"




# Receive configurations after reboot
cat <<EOL >> /usr/local/bin/first-run.sh
#!/bin/bash

# Update the inventory to see new host
TOKEN={{ awx_token }}
function updateInventory {
	curl "{{ awx_base_url }}/api/v2/inventory_sources/{{ awx_inventory_update_job_id }}/update/" -H "Authorization: Bearer \${TOKEN}" -XPOST | jq '.id'
}

function updateStatus {
	local jobId=\$1
	curl "{{ awx_base_url }}/api/v2/inventory_updates/\${jobId}/" -H "Authorization: Bearer \${TOKEN}" -XGET | jq '.status'
}
COUNT=0
SLEEP=3
RETRY=30

updateId=\$(updateInventory)
until [ \$COUNT -ge \$RETRY ]
do
	status=\$(updateStatus \${updateId})
	if [[ "\${status}" == *"successful"* ]]; then
		break
	else
		echo "Job \${updateId} is \${status}"
		COUNT=\$[\$COUNT+1]
		sleep \$SLEEP
	fi
done


# Register job callback
url="{{ awx_base_url }}/api/v2/job_templates/{{ awx_callback_job_id }}/callback/"
configKey=tower_new_host                                                                                                                                                 

RETRY=10
SLEEP=30
COUNT=0
until [ \$COUNT -ge \$RETRY ]
do
	statusCode=\$(curl -s -o /dev/null --write-out '%{http_code}' --data "host_config_key=\${configKey}" "\${url}")
	if [[ ! \$statusCode == 201 ]]; then
		echo "statusCode: \$statusCode"

		COUNT=\$[\$COUNT+1]
		sleep \$SLEEP
	else
		break
	fi
done

systemctl disable first-run.service
EOL
chmod +x /usr/local/bin/first-run.sh

cat <<EOL >> /etc/systemd/system/first-run.service
[Unit]
# The script needs to execute after:
# network interfaces are configured
Wants=network-online.target
After=network-online.target
# all remote filesystems (NFS/_netdev) are mounted
After=remote-fs.target
# name (DNS) and user resolution from remote databases (AD/LDAP) are available
After=nss-user-lookup.target nss-lookup.target
# the system clock has synchronized
After=time-sync.target

[Service]
Type=simple
ExecStart=/usr/local/bin/first-run.sh
User=root

[Install]
WantedBy=multi-user.target
EOL

systemctl daemon-reload
systemctl enable first-run.service

%end
